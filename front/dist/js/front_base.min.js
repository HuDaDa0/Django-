function FrontBase(){}function Auth(){this.maskWrapper=$(".mask-wrapper"),this.scrollWrapper=$(".scroll-wrapper")}FrontBase.prototype.run=function(){this.listenAuthBoxHover()},FrontBase.prototype.listenAuthBoxHover=function(){var t=$(".auth-box"),n=$(".user-more-box");t.hover(function(){n.show()},function(){n.hide()})},$(function(){(new FrontBase).run()}),Auth.prototype.run=function(){this.listenShowHideEvent(),this.listenSwitchEvent(),this.listenSigninEvent(),this.listenImgCaptchaEvent(),this.listenSmsCaptchaEvent(),this.listenSignupEvent()},Auth.prototype.showEvent=function(){this.maskWrapper.show()},Auth.prototype.hideEvent=function(){this.maskWrapper.hide()},Auth.prototype.listenShowHideEvent=function(){var t=this,n=$(".signin-btn"),e=$(".signup-btn"),s=$(".close-btn");n.click(function(){t.showEvent(),t.scrollWrapper.css({left:0})}),e.click(function(){t.showEvent(),t.scrollWrapper.css({left:-400})}),s.click(function(){t.hideEvent()})},Auth.prototype.listenSwitchEvent=function(){var e=this;$(".top-switch").click(function(){var t=e.scrollWrapper,n=t.css("left");(n=parseInt(n))<0?t.animate({left:"0"}):t.animate({left:"-400px"})})},Auth.prototype.listenSigninEvent=function(){var i=this,t=$(".signin-group"),s=t.find("input[name='telephone']"),o=t.find("input[name='password']"),a=t.find("input[name='remember']");t.find("input[name='submit']").click(function(){var t=s.val(),n=o.val(),e=a.prop("checked");xfzajax.post({url:"/account/login/",data:{telephone:t,password:n,remember:e},success:function(t){if(200===t.code)i.hideEvent(),window.location.reload();else{var n=t.message;if("string"==typeof n||n.constructor===String)window.messageBox.show(n,"error");else for(var e in n){var s=n[e];window.messageBox.show(s[0],"error")}}},fail:function(t){}})})},Auth.prototype.listenSignupEvent=function(){var h=this,f=$(".signup-group");f.find(".submit").click(function(){var t=f.find("input[name='telephone']"),n=f.find("input[name='username']"),e=f.find("input[name='password1']"),s=f.find("input[name='password2']"),i=f.find("input[name='img_captcha']"),o=f.find("input[name='sms-captcha']"),a=t.val(),r=n.val(),c=e.val(),p=s.val(),u=i.val(),l=o.val();xfzajax.post({url:"/account/register/",data:{telephone:a,username:r,password1:c,password2:p,img_captcha:u,sms_captcha:l},success:function(t){if(200===t.code)h.hideEvent(),window.location.reload();else{var n=t.message;if("string"==typeof n||n.constructor===String)window.messageBox.show(n,"error");else for(var e in n){var s=n[e];window.messageBox.show(s[0],"error")}}},fail:function(t){window.messageBox.showError("服务器出现错误")}})})},Auth.prototype.listenImgCaptchaEvent=function(){var t=$(".img-captcha");t.click(function(){t.attr("src","/account/img_captcha/?random="+Math.random())})},Auth.prototype.smsSuccessEvent=function(t){var n=this,e=$(".send");e.addClass("disable"),e.unbind("click");var s=60,i=setInterval(function(){s--,e.text(s+"s"),s<=0&&(clearInterval(i),e.removeClass("disable"),e.text("发送验证码"),n.listenSmsCaptchaEvent())},1e3);window.messageBox.showSuccess("你的验证码："+t.data.text)},Auth.prototype.listenSmsCaptchaEvent=function(){var s=this,n=$(".signup-group input[name='telephone']"),i=$(".send");i.click(function(){var t=n.val();t?xfzajax.get({url:"/account/sms_captcha/",data:{telephone:t},success:function(t){if(200==t.code){i.addClass("disable"),i.unbind("click");var n=60,e=setInterval(function(){n--,i.text(n+"s"),n<=0&&(clearInterval(e),i.removeClass("disable"),i.text("发送验证码"),s.listenSmsCaptchaEvent())},1e3);window.messageBox.showSuccess("你的验证码："+t.data.text)}},fail:function(){}}):window.messageBox.showError("请输入手机号码")})},$(function(){(new Auth).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
